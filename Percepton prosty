from os import altsep
import random
import types
import csv 

def sum(weights, values):
    sum = 0
    for i in range(0, len(weights)):
        sum += weights[i] * values[i]
    #print(f"{sum} {weights} {values}")
    return sum

def randomizeInputs(x, y, i):
    results = []
    for i in range(0, i):
        nextY = y + random.random() * 0.15
        nextX = x + random.random() * 0.15
        results.append((nextX, nextY))
    return results

def trainPercepton(trainingSet, activation, biasInfo, alpha, weightRange):
    eras = 0
    bias = [biasInfo.bias]
    #print(weightRange)
    weights = [(random.random() - 0.5) * weightRange for _ in bias + trainingSet[0][0]]
    cont = True
    while cont:
        eras += 1
        cont = False
        for (values, category) in trainingSet: 
            values = bias + values
            stimulation = sum(weights, values)
            result = activation.max if stimulation > biasInfo.theta else activation.min
            error = category - result
            if error != 0:
                cont = True
            for i in range(0, len(values)):
                weights[i] = weights[i] + alpha * error * values[i]
    
    return weights, eras

def test(testingSet, weights, activation, biasInfo):
    errors = []
    for (values, category) in testingSet: 
        values = [biasInfo.bias] + values
        stimulation = sum(weights, values)
        #print ([stimulation] + values + [biasInfo.theta] + weights)
        result = activation.max if stimulation > biasInfo.theta else activation.min
        if result != category:
            errors.append(values)
    #print(f"{len(errors)} {len(testingSet)}")
    return len(errors) / len(testingSet)


def doTest(firstClass, secondClass, activation, biasInfo, alpha = 0.001, weightRange = 1):
    trainingSet = firstClass[int(len(firstClass) / 2):] + secondClass[int(len(secondClass) / 2):]
    random.shuffle(trainingSet)
    testingSet = firstClass[:int(len(firstClass) / 2)] + secondClass[:int(len(secondClass) / 2)]

    weights, eras = trainPercepton(trainingSet, activation, biasInfo, alpha, weightRange)
    accuracy = test(testingSet, weights, activation, biasInfo)
    return accuracy, eras

def getInputs():
    shouldGet = input('Wykorzystac predefiniowane wartosci?')
    if shouldGet == "tak":
        return  [([0,0], 0), ([1,0], 0), ([0,1], 0), ([1,1], 1)]
    print('Wpisz koordynat X, Y i klasę(1 lub 0) oddzieloną spacjami')
    inputs = []
    while True:
        values = input().split(' ')
        input.append(([int(values[0]), int(values[1])], int(values[2])))
        if input('kontynuowac?') == 'nie':
            break
    return inputs


def doRetries(firstClass, secondClass, activation, biasInfoArray, alphaArray, weightRangeArray, getRelevantValue, relevantValueName):
    answer = []
    for i in range(0, len(alphaArray)):
        accuracySum = 0
        erasSum = 0
        for k in range(0, 20):
            random.seed(a=k)
            accuracy, eras = doTest(firstClass, secondClass, activation, biasInfoArray[i], alphaArray[i], weightRangeArray[i])
            accuracySum += accuracy
            erasSum += eras
        answer.append([getRelevantValue(i), accuracySum / 20, erasSum / 20])
    with open(f'wyniki1{relevantValueName}.csv', mode='w') as file:
        writer = csv.writer(file, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        writer.writerow([relevantValueName, "skuteczność", "liczba epok"])
        for a in answer:
            writer.writerow(a)


def getInputs():
    shouldGet = input('Wykorzystac predefiniowane wartosci?')
    if shouldGet == "tak":
        return  [([0,0], 0), ([1,0], 0), ([0,1], 0), ([1,1], 1)]
    print('Wpisz koordynat X, Y i klasę(1 lub 0) oddzieloną spacjami')
    inputs = []
    while True:
        values = input().split(' ')
        input.append(([int(values[0]), int(values[1])], int(values[2])))
        if input('kontynuowac?') == 'nie':
            break
    return inputs

def repeat(value, n):
    answer = []
    for i in range(0, n):
        answer.append(value)
    return answer


if __name__ == '__main__':
    dataSet = getInputs()
    random.seed(a = 5)
    class1 = list(filter(lambda x: x[1] == 1, dataSet))
    class0 = list(filter(lambda x: x[1] == 0, dataSet))
    relation = len(class1) / len(class0)
    
    numOfClass1 = 10 / relation if relation < 1 else 10 
    numOfClass0 = 10 * relation if relation > 1 else 10 

    generatedClass1 = [([genX, genY], 1) 
        for ([x,y], _) in class1 
        for (genX, genY) in randomizeInputs(x, y, int(numOfClass1))]
    generatedClass0 = [([genX, genY], 0) 
        for ([x,y], _) in class0 
        for (genX, genY) in randomizeInputs(x, y, int(numOfClass0))]
    #print(generatedClass0)
    generatedClassMinus1 = [([x, y], -1) for ([x, y], _) in generatedClass0]
    
    activation0 = types.SimpleNamespace(max=1, min = 0)
    activationMinus =  types.SimpleNamespace(max=1, min = -1)

    thetaArray = [0.05, 1.0, 0.85, 0.7, 0.5, 0.4, 0.25, 0.15]
    noBiasThetaArray = [types.SimpleNamespace(bias=0, theta=theta) for theta in thetaArray]
    alphaArray = [0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1]
    rangeArray = [2, 1.6, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2]

    noBias = types.SimpleNamespace(bias=1, theta=0.5)
    bias = types.SimpleNamespace(bias=1, theta=0)

    
    doRetries(generatedClass1, generatedClass0, activation0, noBiasThetaArray,
        repeat(0.01, len(thetaArray)), repeat(1, len(thetaArray)),
        lambda i: noBiasThetaArray[i].theta, "theta")

    doRetries(generatedClass1, generatedClass0, activation0, repeat(bias, len(alphaArray)),
        alphaArray, repeat(1, len(alphaArray)),
        lambda i: alphaArray[i], "alpha")

    doRetries(generatedClass1, generatedClass0, activation0, repeat(bias, len(rangeArray)),
        repeat(0.01, len(rangeArray)), rangeArray,
        lambda i: f"{-0.5 * rangeArray[i]} - {0.5 * rangeArray[i]}", "rangeWithBias")

    doRetries(generatedClass1, generatedClass0, activation0, repeat(noBias, len(rangeArray)),
        repeat(0.01, len(rangeArray)), rangeArray,
        lambda i: f"{-0.5 * rangeArray[i]} - {0.5 * rangeArray[i]}", "rangeWithNoBias")

    doRetries(generatedClass1, generatedClassMinus1, activationMinus, noBiasThetaArray,
        repeat(0.01, len(thetaArray)), repeat(1, len(thetaArray)),
        lambda i: noBiasThetaArray[i].theta, "thetaBipolar")

    doRetries(generatedClass1, generatedClassMinus1, activationMinus, repeat(bias, len(alphaArray)),
        alphaArray, repeat(1, len(alphaArray)),
        lambda i: alphaArray[i], "alphabipolar")

    doRetries(generatedClass1, generatedClassMinus1, activationMinus, repeat(bias, len(rangeArray)),
        repeat(0.01, len(rangeArray)), rangeArray,
        lambda i: f"{-0.5 * rangeArray[i]} - {0.5 * rangeArray[i]}", "rangeWithBiasBipolar")

    doRetries(generatedClass1, generatedClassMinus1, activationMinus, repeat(noBias, len(rangeArray)),
        repeat(0.01, len(rangeArray)), rangeArray,
        lambda i: f"{-0.5 * rangeArray[i]} - {0.5 * rangeArray[i]}", "rangeWithNoBiasBipolar")


    





            
